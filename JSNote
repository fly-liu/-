渐进增强
针对低版本浏览器进行构建页面，保证最基本的功能，对高版本的浏览器进行效果、交互等优化达到更好的用户体验

优雅降级
一开始构建完整的功能，再针对低版本浏览器进行兼容

sessionStorage,localStorage,cookie之间的区别
共同点：用于浏览器端存储的缓存数据
不同点：
  1.当设置了cookie后，数据会发送到服务器端，造成一定的宽带浪费；sessionStorage,localStorage会保存到本地
  2.cookie数据不能超过4KB，web Storage数据存储可以达到5M
  3.cookie只在设置的过期时间之前有效，即使关闭浏览器；sessionStorage仅在关闭浏览器之前有效；localStorage数据存储永远有效
  4.cookie和localStorage在同源同窗口中都是共享的；sessionStorage在不同的浏览器窗口不共享
  
JavaScript的typeof返回哪些数据类型?
Object,number,function,boolean,string,undefined

undefined和null的区别?
null是一个表示"无"的对象，转为数值时为0；undefined是一个表示"无"的原始值，转为数值时为NaN.
null表示"没有对象"，即该处不应该有值。
（1） 作为函数的参数，表示该函数的参数不是对象。
（2） 作为对象原型链的终点。
undefined表示"缺少值"，就是此处应该有一个值，但是还没有定义。
（1）变量被声明了，但没有赋值时，就等于undefined。
（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。
（3）对象没有赋值的属性，该属性的值为undefined。
（4）函数没有返回值时，默认返回undefined。

强制类型转换：
parseInt(),parseFloat(),Number()

隐式类型转换：
--,+n,==

JSON对象：我们通常把JavaScript字面量对象理解成JSON对象，JSON是一种描述数据交换格式，是JavaScript的一个子集，
JSON.stringify(value [, replacer] [, space]) -- JSON序列化,将JSON对象转换为字符串
参数：
  value：要转换成JSON字符串的原始值、对象或数组
  replacer：可选参数，一个数组或函数
  space：可选参数,一个数值或一个字符串
返回：JSON格式的字符串，代表value的值，同时通过了replacer的过滤，以及根据space进行了格式化

JSON.parse(s[, reviver]) -- JSON解析，JSON反序列化，解析JSON格式的字符串
参数：
  s,要解析的字符串
  reviver,可选参数，用来转换解析值的可选函数

parseInt(),parseFloat() 和 Number() 的区别：
Number()的强制类型转换与parseInt()和parseFloat()方法的处理方式相似，只是它转换的是整个值，而不是部分值.
parseInt()和parseFloat()方法只转换第一个无效字符之前的字符串。如“3.4.5”被转换成“3.4”,用Number()进行强制类型转换将返回NAN

匿名闭包：函数内部的代码一直存在于闭包内，在整个运行周期内，该闭包都保证了内部的代码处于私有状态。
(function(){}());  匿名函数后面的括号表示，创建一个立即执行的函数表达式

Object.prototype.hasOwnProperty() -- 判断一个对象是否包含自定义属性而不是原型链上的属性,hasOwnProperty 是 JavaScript 中唯一一个处理属性但是不查找原型链的函数

call，apply，bind的区别：
apply和call都是为了改变某个函数运行时的上下文而存在的（就是为了改变函数内部this的指向）
如果使用apply或call方法，那么this指向他们的第一个参数，apply的第二个参数是一个参数数组，call的第二个及其以后的参数都是数组里面的元素
常用用法：
1.数组之间的追加；
2.获取数组中的最大值和最小值，利用他们扩充作用域拥有Math的min和max方法；由于没有什么对象调用这个方法，所以第一个参数可以写作null或者本身；
  var num = [5,3,120,-125]
  var maxNumber = Math.max.apply(Math,num); // 120
  var minNumber = Math.min.call(Math,5,3,120,-125); // -125
3.验证是否是数组（前提是toString（）方法没有被重写过）
  function isArray(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
  }
4.让类数组拥有数组的方法
  比如arguments对象，获取到的文档节点等，并没有数组的那些方法：
  Array.prototype.slice.apply（argument）; //理论上来说这个比较快，直接在原型上查找slice方法但实际上比较慢
  或者
  [].slice.apply(arguments); //理论上来说这个比较慢，因为要Array做一个实例化再查找slice方法实际上比较快，
                             //因为现在的各种自动化工具会把上一种方法转换为这种，而第二种代码比较简洁，所以会比较快；
bind（）--也是改变函数体内this的指向
bind会创建一个新函数，称为绑定函数，当调用这个函数的时候，绑定函数会以创建它时传入bind（）方法的第一个参数作为this，传入bind（）方法的第二个及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数；

三个的使用区别：
都是用来改变函数的this对象的指向的；
第一个参数都是this要指向的对象；
都可以利用后续参数传参；
bind是返回对应函数，便于稍后调用，apply、call是立即调用；
  
  
原型链：
实例对象与原型之间的连接，叫做原型链
原型链是针对构造函数的，比如我先创建了一个函数，然后通过一个变量new了这个函数，那么这个被new出来的函数就会继承创建出来的那个函数的属性，
然后如果我访问new出来的这个函数的某个属性，但是我并没有在这个new出来的函数中定义这个变量，那么它就会往上（向创建出它的函数中）查找，这个
查找的过程就叫做原型链。

构造函数与对象之间的关系:
每一个Object都有一个__proto__ 属性，指向它的构造函数的prototype属性，构造函数也有__proto__，也就是Function.prototype,而Function.prototype的__proto__指向Object.prototype

三种函数类型：函数声明，函数表达式，构造函数

自由变量：
凡是跨了自己的作用域的变量都叫自由变量

作用域：
作用域是在运行时代码中的某些特定部分中变量，函数和对象的可访问性。换句话说，作用域决定了代码区块中变量和其他资源的可见性。
当定义一个函数时它的作用域也被定义了，
JavaScript中有两种作用域：全局作用域和局部作用域，ES6中let、const支持块级作用域。

作用域链：
JavaScript解释器内部的[scope]属性包含了该函数在被创建时作用域中的所有对象集合。该集合被称为函数的作用域。
当创建一个函数时，其作用域链中保存的对象，就是在创建该函数时作用域中所有可访问的数据。
作用域的特点就是，子对象会一级一级地向上寻找所有父对象的变量。

执行上下文的概念：
执行上下文定义了一个函数的正在执行时的作用域环境。执行上下文和上下文不同，执行上下文指的是作用域，上下文指的是this的取值指向

上下文和作用域的区别：
作用域(scope) 是指变量的可访问性，上下文(context)是指 this 在同一作用域内的值。在全局作用域(scope)中上下文中始终是Window对象。(愚人码头注：取决于JavaScript 的宿主换环境，在浏览器中在全局作用域(scope)中上下文中始终是Window对象。在Node.js中在全局作用域(scope)中上下文中始终是Global 对象)

函数表达式和函数声明的区别：
函数声明以function关键字开头，接着是必须的函数（变量）名和以逗号分隔的可选的参数列表，再接着就是以大括号封装的函数体。函数声明必须是一个单独的JavaScript语句。
在任何情况下都是其它JavaScript语句的一部分（比如赋值表达式等号的右侧、函数的参数）的函数被称为函数表达式。

如何从外部读取局部变量：
在函数内部再定义一个函数。子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立

闭包的概念：
闭包就是能够读取其他函数内部变量的函数。闭包可以理解成“定义在一个函数内部的函数“。
闭包可以用在许多地方。它的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。

什么是跨域：
由于浏览器的同源策略，凡是发送请求URL的协议、域名、端口号三者之间任何一个与当前页面地址不同的即为跨域。
跨域请求资源的方法有：jsonp
jsonp：通过动态插入script标签来读取其他域的资源。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行
优点：它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行，
     不需要XMLHttpRequest或ActiveX的支持；并且在请求完毕后可以通过调用callback的方式回传结果。
缺点：它只支持GET请求而不支持POST等其它类型的HTTP请求；它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。

json和jsonp的区别：
json是一种数据格式
jsonp是一种数据调用方式

jsonp,script标签用什么方式请求方式？
是使用get请求方式

HTTP和HTTPS的区别：
HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览
      器的传输协议，它可以使浏览器更加高效，使网络传输减少。
HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。
HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，
于是网景公司设计了SSL（Secure Sockets Layer 安全套接层）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。
HTTP 和 HTTPS 的不同之处：
HTTP 的 URL 以 http:// 开头，而 HTTPS 的 URL 以 https:// 开头
HTTP 是不安全的，而 HTTPS 是安全的
HTTP 标准端口是 80 ，而 HTTPS 的标准端口是 443
在 OSI 网络模型中，HTTP 工作于应用层，而 HTTPS 工作在传输层
HTTP 无需加密，而 HTTPS 对传输的数据进行加密
HTTP 无需证书，而 HTTPS 需要CA认证证书

HTTP协议头含有哪些重要的部分:


HTTP状态码：
200 服务器已成功处理了请求并提供了请求的网页
204 服务器成功处理了请求，但没有返回任何内容
301 请求的网页已永久移动到新位置
302 请求的资源限制临时从不同的URL响应请求
304 请求资源没变化，使用本地缓存
400 由于包含语法错误，当前请求无法被服务器理解
403 请求失败，请求的资源未被服务器发现
404 请求的内容无法得到响应
410 被请求的资源在服务器上已经不再可用
500 服务器遇到未知状况，导致无法完成对请求的处理
503 由于服务器维护或过载，服务器当前无法处理请求

GET和POST数据传输方式，区别：
GET和POST都是http协议定义的。
GET更常用，更方便，性能好，传输大小有限制：数据通过URL传递，但是URL有一定长度限制
POST性能没有GET好，比GET稍微安全一点，没有传输大小的限制

垃圾回收机制，执行环境负责管理代码执行过程中使用的内存。
垃圾回收策略：标记清除（较为常用）和引用计数

内存泄漏：指一块被分配的内存既不能使用，又不能回收，直到浏览器进程结束。
内存泄漏的几种情况：
1.当页面中的元素被移除或替换时，若元素绑定的事件仍没有被移除，在IE中需要先手工移除事件，不然会造成内存泄漏

创建对象的多种方式：
1、工厂方式创建对象：面向对象中的封装函数(内置对象)
  function createPerson(name) {
    //1、原料
    var obj = new Object();
    //2、加工
    obj.name = name;
    obj.showName = function() {
      alert(this.name);
    }
    //3、出场
    return obj;
  }
  var p1 = createPerson('小米');
  p1.showName();
  工厂模式的优缺点：虽然解决了创建相似对象的问题，但是却没有解决对象识别问题（即怎样知道一个对象的类型）
2.构造函数创建对象
  构造函数模式的优缺点：
  1、优点：创建自定义函数意味着将来可以将它的实例标识为一种特定的类型，这是构造函数胜过工厂模式的地方
  2、缺点：每个方法都要在每个实例上重新创建一遍
3.对象字面量方式创建对象
4.用原型方式
  1、原型对象：只要创建了一个新函数，就会为该函数创建一个prototype属性，这个属性指向函数的原型对象。
     在默认情况下，所有的原型对象都会自动获得一个constructor（构造函数）属性，这个属性是一个指向prototype属性所在函数的指针
  2、可以通过isPrototypeOf()方法检查一个对象是否存在于另一个对象的原型链上,例：Baz.prototype.isPrototypeOf(baz)
  function Person() {}
  Person.prototype.name = '小米';
  Person.prototype.showName = function() {
    alert(this.name);
  }
  原型模式的优缺点：
  1、优点：可以让所有的对象实例共享它所包含的属性和方法
  2、缺点：原型中是所有属性都是共享的，但是实例一般都是要有自己的单独属性的。所以一般很少单独使用原型模式。
5.混合模式：
  构造函数模式定义实例属性，而原型模式用于定义方法和共享的属性

面向对象编程（OOP）的特点：
  抽象：抓住核心问题
  封装：只能通过对象来访问方法
  继承：从已有的对象下继承出新的对象
  多态：多对象的不同形态

JavaScript中实现继承的方法：
1.原型链:利用原型让一个引用类型继承另外一个引用类型的属性和方法。
  构造函数，原型，实例之间的关系：每个构造函数都有一个原型对象，原型对象包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。
  function SuperType() {this.property = true;}
  SuperType.prototype.getSuperValue = function() {return this.property;}
  function SubType() {this.property = false;}
  SubType.prototype = new SuperType();
  SubType.prototype.getSubValue = function() {return this.property;}
  var instance = new SubType();
  console.log(instance.getSuperValue()); // true
  缺点：引用类型的属性被所有实例共享
  
2.借用构造函数(经典继承):在子类型构造函数的内部调用超类构造函数，通过使用call()和apply()方法可以在新创建的对象上执行构造函数。
  function SuperType() {this.colors = ["red","blue","green"]}
  function SubType() {
    SuperType.call(this); // 继承了SuperType
  }
  var instance1 = new SubType();
  instance1.colors.push("black");
  console.log(instance1.colors;) // "red","blue","green","black"
  var instance2 = new SubType();
  console.log(instance2.colors;) // "red","blue","green"
  优点：
  1.避免了引用类型的属性被所有实例共享
  2.可以在 Child 中向 Parent 传参
  缺点：方法都在构造函数中定义，每次创建实例都会创建一遍方法。
  
3.原型链和构造函数组合继承:将原型链和借用构造函数的技术组合在一块，从而发挥两者之长的一种继承模式。
  function SuperType(name) {
    this.name = name;
    this.color = ["red","blue","green"];
  }
  SuperType.prototype.sayName = function() {console.log(this.name);}
  function SubType(name,age) {
    SuperType.call(this,name); //继承属性
    this.age = age;
  }
  SubType.prototype = new SuperType();
  SubType.prototype.constrcutor = SubType;
  SubType.prototype.sayAge = function() {console.log(this.age);}
  var instance1 = new SubType('EvanChen',18);
  instance1.colors.push("black");
  consol.log(instance1.colors);//"red","blue","green","black"
  instance1.sayName();//"EvanChen"
  instance1.sayAge();//18
  每个实例对象都有一个constructor属性，并且指向构造器（函数）。而且每个new出来的实例都是某个原型constructor的实例
  优点：融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式。
  缺点：组合继承最大的缺点是会调用两次父构造函数。
  
4.原型式继承/Object()继承:就是 ES5 Object.create 的模拟实现，将传入的对象作为创建的对象的原型 
  function createObj(o) {
    function F(){}
    F.prototype = o;
    return new F();
  }
  var person = {
    name: 'kevin',
    friends: ['daisy', 'kelly']
  }
 
  var person1 = createObj(person);
  var person2 = createObj(person);

  person1.name = 'person1';
  console.log(person2.name); // kevin

  person1.firends.push('taylor');
  console.log(person2.friends); // ["daisy", "kelly", "taylor"]
  Object.create()方法规范化了原型式继承，这个方法接收两个参数：一个用作新对象原型的对象和一个作为新对象定义额外属性的对象。
  
5.寄生式继承:创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后再像真正是它做了所有工作一样返回对象。
  function createAnother(original) {
    var clone = object(original);
    clone.sayHi = function () {
      alert("hi");
    };
    return clone;
  }
  var person = {
    name:"EvanChen",
    friends:["Shelby","Court","Van"];
  };
  var anotherPerson = createAnother(person);
  anotherPerson.sayHi();///"hi"
  缺点：跟借用构造函数模式一样，每次创建对象都会创建一遍方法。
  
6.寄生组合式继承:通过借用函数来继承属性，通过原型链的混成形式来继承方法
  function object(o) {
    function F() {}
    F.prototype = o;
    return new F();
  }
 
  function prototype(child, parent) {
    var prototype = object(parent.prototype);
    prototype.constructor = child;
    child.prototype = prototype;
  }
 
  // 当我们使用的时候：
  prototype(Child, Parent);
7.ES6实现继承
  class father {
    constructor(name) {
      this.name = name;
      this.names = [1,2,3]
    }
    getName() {console.log(this.name);}
  }
  class child extends father {
    constrcutor(name) {
      super(name);
    }
    sayHello() {console.log("sayHello");}
    static hh() {console.log("hh")}
  }
  var cc=new child("juanjuan");
  cc.sayHello();
  cc.getname();  //juanjuan
  child.hh();  //hh
  
构造函数和原型链的区别：我想这个问题，应该是想问使用构造函数继承和使用原型链继承有哪些区别。
  原型链继承：引用类型的属性被所有实例共享
  构造函数继承
    优点：
    1.避免了引用类型的属性被所有实例共享
    2.可以在 Child 中向 Parent 传参
    缺点：方法都在构造函数中定义，每次创建实例都会创建一遍方法。
  组合继承：原型链继承和经典继承双剑合璧。
    优点：融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式
    缺点：组合继承最大的缺点是会调用两次父构造函数
  原型式继承：就是 ES5 Object.create 的模拟实现，将传入的对象作为创建的对象的原型 
    缺点：包含引用类型的属性值始终都会共享相应的值，这点跟原型链继承一样。
  寄生式继承：创建一个仅用于封装继承过程的函数，该函数在内部以某种形式来做增强对象，最后返回对象。
    缺点：跟借用构造函数模式一样，每次创建对象都会创建一遍方法。
  寄生组合式继承：
    组合继承最大的缺点是会调用两次父构造函数。

String.prototype.split()  // 把一个字符串分割成字符串数组,第一个参数必选，根据参数分割，第二个参数可选，规定数组的长度
Array.prototype.join()  // 把数组中的所有元素放入一个字符串，元素是通过指定的参数进行分隔

如何判断一个变量是Array类型？如何判断一个变量是Number类型？
typeof来判断js的数据类型，但是对于数组这样一个特殊的对象却只能返回"object"
判断是否为数组：
方法一：instanceof
  var arr = [];
  console.log(arr instanceof Array) // true
方法二： constructor，返回对象相对应的构造函数
  判断各种类型的方法：
  console.log([].constructor == Array);  
  console.log({}.constructor == Object);  
  console.log("string".constructor == String);  
  console.log((123).constructor == Number);  
  console.log(true.constructor == Boolean);  
注意：
  使用instaceof和construcor,被判断的array必须是在当前页面声明的！比如，一个页面（父页面）有一个框架，框架中引用了一个页面（子页面），
  在子页面中声明了一个array，并将其赋值给父页面的一个变量，这时判断该变量，Array ==object.constructor;会返回false；
原因：
  1、array属于引用型数据，在传递过程中，仅仅是引用地址的传递。
  2、每个页面的Array原生对象所引用的地址是不一样的，在子页面声明的array，所对应的构造函数，是子页面的Array对象；父页面来进行判断，使用的Array并不等于子页面的Array。  
方法三 ：Object.prototype.toString.call(arr) === "[object Array]"
  function isArray(o) {  
    return Object.prototype.toString.call(o) === ‘[object Array]‘;  
  }
判断是否为数字：
方法一：typeof 运算符，对基本数据类型进行判断
方法二：instanceof 操作符（基于原型链）
方法三：Object.prototype.toString
方法四：constructor属性 

Object是引用类型吗？引用类型和基本类型有什么区别？哪个是存在堆哪一个是存在栈上面的？
基本数据类型：
1.基本类型的值是不可变得：不能给基本类型添加属性和方法，再次说明基本类型时不可变得；
2.基本类型的比较是值的比较：只有在它们的值相等的时候它们才相等
3.基本类型的变量是存放在栈区的，栈区包括了 变量的标识符和变量的值
引用类型：
1.引用类型的值是可变的
2.引用类型的值是同时保存在栈内存和堆内存中的对象
  引用类型的存储需要内存的栈区和堆区（堆区是指内存里的堆内存）共同完成，栈区内存保存变量标识符和指向堆内存中该对象的指针，
  也可以说是该对象在堆内存的地址
3.引用类型的比较是引用的比较
区别：
1.引用类型值可添加属性和方法，而基本类型值则不可以
2.在复制变量值时，基本类型会在变量对象上创建一个新值，再复制给新变量。
  而引用类型是将存储在变量对象的值复制一份给新变量，但是两个变量的值都指向存储在堆中的一个对象，也就是说，其实他们引用了同一个对象，改变其中一个变量就会影响到另一个变量。
3.检测类型：
  typeof:确定变量是字符串、数值、布尔值还是undefined的最佳工具
  instanceof ：判断是否是某个对象类型

解释一下事件冒泡和事件捕获：
事件流：IE的事件流是事件冒泡，而Netscape Communicator的事件流是事件捕获流
事件冒泡：事件到达事件目标之后不会结束，会逐层向上冒泡，直至document对象，跟事件捕获相反
事件捕获：和事件冒泡相反，首先发生在document上，最后到达目的节点（即事件目标）。
DOM事件流：一般的，事件分为三个阶段：捕获阶段、目标阶段和冒泡阶段

事件委托（手写例子），事件冒泡和捕获，如何阻止冒泡？如何阻止默认事件？
事件委托：利用事件冒泡的特性，将里层的事件委托给外层事件，根据event对象的属性进行事件委托，改善性能。
         使用事件委托能够避免对特定的每个节点添加事件监听器；事件监听器是被添加到它们的父元素上。
         事件监听器会分析从子元素冒泡上来的事件，找到是哪个子元素的事件。
事件冒泡、事件捕获阻止：
event.stopPropagation( ); // 阻止事件的进一步传播，包括（冒泡，捕获），无参数
event.cancelBubble = true; // true 为阻止冒泡
阻止默认事件：
（1）return false; 阻止独享属性（通过on这种方式）绑定的事件的默认事件
（2）event.preventDefault( ); 阻止通过 addEventListener( ) 添加的事件的默认事件
（3）event.returnValue = false; 阻止通过 attachEvent( ) 添加的事件的默认事件

new 一个对象具体做了什么：
1、创建一个新对象 
2、将构造函数的作用域赋给新对象（this） 
3、执行构造函数中的代码（为新对象添加属性） 
4、返回该对象。 
因此对于一个构造函数即使它的内部语句最后并没有return，也会默认有return this；语句
麻烦的解释：
1. 创建空对象{}
2. 使用新对象，调用函数，函数中的this被指向新实例对象：{}.构造函数(); 
3. 设置新对象的constructor属性为构造函数的名称，设置新对象的__proto__属性指向构造函数的prototype对象
4. 将初始化完毕的新对象地址，保存到等号左边的变量中
注意：若构造函数中返回this或返回值是基本类型（number、string、boolean、null、undefined）的值，则返回新实例对象；
      若返回值是引用类型的值，则实际返回值为这个引用类型。

=== 和 == , [] === [] //false, undefined === undefined //true,[] == [] //false, undefined == undefined //true

"严格模式"的目的：
- 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;
- 消除代码运行的一些不安全之处，保证代码运行的安全；
- 提高编译器效率，增加运行速度；
- 为未来新版本的Javascript做好铺垫。
'use strict' 严格模式的好处和坏处：
"严格模式"体现了Javascript更合理、更安全、更严谨的发展方向，包括IE 10在内的主流浏览器，都已经支持它
一些在"正常模式"下可以运行的语句，在"严格模式"下将不能运行

JS如何实现重载和多态：
多态：一个实例可以拥有多个类型，它既可以是这种类型，也可以是那种类型，这种多种状态被称为类的多态
     继承本身是多态的一种实现；重载也是多态的一种体现
重载：重载就是同名方法的多个实现。依靠参数的类型和参数的个数来区分和识别。
1.根据arguments个数实现重载
2.检测数据类型实现重载，根据传参的类型，调用不同的方法，用typeof或instanceof进行检测

什么是预加载、懒加载：
预加载是提前加载图片，当用户需要查看时可直接从本地缓存中渲染
懒加载也就是延迟加载，懒加载的主要目的是作为服务器前端的优化，减少请求数或延迟请求数
懒加载实现方式：
1.第一种是纯粹的延迟加载，使用setTimeOut或setInterval进行加载延迟.
2.第二种是条件加载，符合某些条件，或触发了某些事件才开始异步下载。
3.第三种是可视区加载，即仅加载用户可以看到的区域，这个主要由监控滚动条来实现，一般会在距用户看到某图片前一定距离遍开始加载。

如何实现图片滚动懒加载：
判断浏览器窗口顶部与文档顶部之间的距离，也就是滚动条滚动的距离

setTimeout和promise的执行顺序：
浏览器读取script标签中的代码也是一个事件队列，Promise的任务会在当前事件循环末尾中执行，而setTimeout中的任务是在下一次事件循环执行

navigator对象，location和history

js动画和css3动画比较

DOM事件的绑定的几种方式

DOM事件中target和currentTarget的区别

手指点击可以触控的屏幕时，是什么事件

什么是函数柯里化，以及在函数式编程的应用

JS代码调试

浏览器的全局变量有哪些

浏览器同一时间能够从一个域名下载多少资源

离职的原因：
想提升自己的能力，接触新的技术；在那太闲，给我安排的事情不多，感觉发挥不了自己能力，没有进步；想接受更多的挑战
