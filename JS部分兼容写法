谈谈我在项目中遇到的兼容性问题？

1.oninput，当元素获得用户输入时运行脚本。这个事件在IE6/7/8中表现不兼容，在IE中，支持的是onpropertychange
兼容性写法： element.oninput = element.onpropertychange = fn;

2.document.getElementsByClassName(),IE6/7/8不兼容
封装函数：
function fn(str){
    //1.区分浏览器。如果是支持document.getElementsByClassName()我就用，这个方法。
    if(document.getElementsByClassName){
        //var arrStr = document.getElementsByClassName(str);
        //return arrStr;
        return document.getElementsByClassName(str);
    }
    //2.如果不支持。
    //(1).获取页面上所有的标签（元素节点），然后判断。
    var arrAllElements = document.getElementsByTagName("*");
    //(2).定义一个新数组
    var arr = [];
    //(3).循环判断className这个属性，如果==我们传过来的参数，那么放进数组。
    for(var i=0;i<arrAllElements.length;i++){
            //需求：判断一个字符串中是否包含另外一个字符串
            //步骤：
            //1.把字符串变成数组。
        var arrClassName = arrAllElements[i].className.split(" ");
            //2.比较数组中的每一个元素，如果有一个和str相等，那么把所在的元素放进数组
        for(var j=0;j<arrClassName.length;j++){
            if(arrClassName[j] == str){
                arr.push(arrAllElements[i]);
            }
        }
    }
    //(4).如果不是，不用管。
    //(5).返回数组
    return arr;
}

3.获取下一个兄弟节点
nextSibling: 主要是IE678支持。（获取下一个元素节点）但是在火狐谷歌IE9+获取下一个节点。（包括文本和换行）
nextElementSibling: 火狐谷歌IE9+支持获取下一个兄弟元素节点，但在IE678中不存在。
兼容写法：
var elNext = box.nextElementSibling || box.nextSibling;

4.获取上一个兄弟节点
previousSibling
previousElementSibling
兼容写法：
var elPrev = box.previousElementSibling || box.previousSibling;

5.获取第一个子节点：
var firstElement = box.firstElementChild || box.firstChild;

6.获取最后一个节点：
var lastElement = box.lastElementChild || box.lastChild;

JS部分：
var winW = document.body.clientWidth || document.docuemntElement.clientWidth;//网页可见区域宽
var winH = document.body.clientHeight || document.documentElement.clientHeight;//网页可见区域高
//以上为不包括边框的宽高，如果是offsetWidth或者offsetHeight的话包括边框

var winWW = document.body.scrollWidth || document.documentElement.scrollWidth;//整个网页的宽
var winHH = document.body.scrollHeight || document.documentElement.scrollHeight;//整个网页的高

var scrollHeight = document.body.scrollTop || document.documentElement.scrollTop;//网页被卷去的高
var scrollLeft = document.body.scrollLeft || document.documentElement.scrollLeft;//网页左卷的距离

var screenH = window.screen.Height;//屏幕分辨率的高
var screenW = window.screen.Width;//屏幕分辨率的宽
var screenX = window.screenLeft;//浏览器窗口相对于屏幕的x坐标（除了FireFox）
var screenXX = window.screenX;//FireFox相对于屏幕的X坐标
var screenY=window.screenTop;//浏览器窗口相对于屏幕的y坐标（除了FireFox）
var screenYY=window.screenY;//FireFox相对于屏幕的y坐标

//event事件问题
document.onclick=function(ev){//兼容写法；
    var e=ev||window.event;
    var mouseX=e.clientX;//鼠标X轴的坐标
    var mouseY=e.clientY;//鼠标Y轴的坐标
}

//设置监听事件
function addEvent(obj,type,fn){//添加事件监听，三个参数分别为 对象、事件类型、事件处理函数，默认为false
    if (obj.addEventListener) {
        obj.addEventListener(type,fn,false);//非IE
    } else{
        obj.attachEvent('on'+type,fn);//ie,这里已经加上on，传参的时候注意不要重复加了
    };
}
function removeEvent(obj,type,fn){//删除事件监听
    if (obj.removeEventListener) {
        obj.removeEventListener(type,fn,false);//非IE
    } else{
        obj.detachEvent('on'+type,fn);//ie，这里已经加上on，传参的时候注意不要重复加了
    };
}

//js阻止事件传播，这里使用click事件为例
document.onclick=function(e){
    var e=e||window.event;
    if (e.stopPropagation) {
        e.stopPropagation();//W3C标准
    }else{
        e.cancelBubble=true;//IE....
    }
}

//js阻止默认事件
document.onclick=function(e){
    var e=e||window.event;
    if (e.preventDefault) {
        e.preventDefault();//W3C标准
    }else{
        e.returnValue='false';//IE..
    }
}

//关于event事件中的target
document.onmouseover=function(e){
    var e=e||window.event;
    var Target=e.target||e.srcElement;//获取target的兼容写法，后面的为IE
    var from=e.relatedTarget||e.formElement;//鼠标来的地方，同样后面的为IE...
    var to=e.relatedTarget||e.toElement;//鼠标去的地方
}

//鼠标滚轮事件
//火狐中的滚轮事件
document.addEventListener("DOMMouseScroll",function(event){
    alert(event.detail);//若前滚的话为 -3，后滚的话为 3
},false)
//非火狐中的滚轮事件
document.onmousewheel=function(event){
    alert(event.detail);//前滚：120，后滚：-120
}



