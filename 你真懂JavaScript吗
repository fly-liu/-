题1：
if(!('a' in window)) { //如果window不包含属性a，就声明一个变量a，然后赋值为1
  var a = 1;
}
alert(a);
实际上结果会输出"undefined"。要了解为什么，我们需要知道JavaScript里的3个概念：
1.所有的全局变量都是window对象的属性，语句var a=1;等价于window.a=1;
2.所有的变量声明都在范围作用域的顶部;
3.变量声明被提前，但变量赋值没有。当变量声明和赋值在一起用的时候，JavaScript引擎会自动将它分为两步

上面的代码等价于：
var a;
if(!('a' in window)) {
  a = 1;
}
alert(a);

题2：
var a = 1,
    b = function a(x) {
      x && a(--x);
    };
alert(a);  // 1
概念：
1.变量声明在进入执行上下文就完成了
2.函数声明也会前置，所有函数声明都在执行代码之前都已经完成了声明；函数表达式没有提前，就相当于平常的变量赋值
3.函数声明会覆盖变量声明，但不会覆盖变量赋值，例：
  function value() {
    return 1;
  }
  var value = 1;
  alert(typeof value);  // "number"

题3：
function a(x) {
  return x * 2;
}
var a;
alert(a); // 执行a的时候，相应地就弹出了函数a的内容了

题4：
function b(x, y, a) {
  arguments[2] = 10;
  alert(a);  // 10
}
b(1,2,3);
// arguments的值永远与对应命名参数的值保持同步，前提是arguments的索引值小于传入的参数个数。arguments对象和参数不是访问相同的内存；
他们的内存空间是独立的，但是值是同步的，arguments对象的长度是由传入的参数个数决定的，不是由定义函数时的命名参数的个数决定的

题5：
function a() {
  alert(this);
}
a.call(null); // [object Window]
概念：
1.调用方法时，this指向到调用它的Object对象上，在全局作用域里，this等价于window（浏览器中，非浏览器中等价于global）
如果第一个参数传入的对象调用者是null或者undefined的话，call方法将把全局对象（也就是window）作为this的值。


